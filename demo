#!/bin/bash

DEMO_DIR="$( dirname "${BASH_SOURCE[0]}" )"
ROOT_DIR="$(pwd)"

source demo-magic

TYPE_SPEED=30
# PROMPT_AFTER=1
DEMO_PROMPT="☸️ $ "
NO_WAIT=1

# function () {
#   if [[ -n "${NO_WAIT}" ]]; then
#     sleep 2
#   else
#     if [[ -n "${1-}" ]]; then
#       sleep "$1"
#     else

#     fi
#   fi
# }

function comment() {
  echo -e '\033[0;33m>>> '$1' <<<\033[0m'
  wait
}

comment "Goal of the demo"
echo "this demo will iterate through all the kubeconfig and demonstrate that you can use a generic kubeconfig to import multiple clusters"

comment "Structure of the demo"
echo "Directory and files"
echo "- demo: run this demo"
echo "- demo-magic: magic behind this demo"
echo "- generic-import-hub-setup.sh setup script to run against hub before demo"
echo "- generic-import-hub-cleanup.sh cleanup script for after the demo."
echo "- generate-import.sh heart of this demo to execute the import"
echo "- az-get-kubeconfig.sh helper script to get AKS kubeconfig from Azure"
echo "- configs: directory containing stuff generated by setup script"
echo "- templates: directory containing templates use by setup and import scripts"
echo "- kubeconfigs: directory containing the kubeconfigs for the managedcluster"

comment "Before running demo script run generic-import-hub-setup.sh against the hub"
echo "generic-import-hub-setup.sh perform the following setup"
echo "- create generic-import namespace"
echo "- setup generic-import serviceaccount with permission"
echo "- generate configs/bootstrap-kubeconfig.yaml"
echo "- (optional) extract image pull-secret from hub"

comment "KUBECONFIG should point to the hub"
pe 'kubectl cluster-info'
pe 'kubectl get managedcluster'

for kubeconfig in `ls kubeconfigs/*`; do
    cluster_name=`basename $kubeconfig`

    comment "Importing cluster with name: $cluster_name"
    pe "KUBECONFIG=$kubeconfig kubectl cluster-info"
    pe "KUBECONFIG=$kubeconfig ./generic-import.sh $cluster_name"

    comment "After the import we see new ManagedCluster being created but not approved"
    pe "kubectl get managedcluster $cluster_name"
    comment "CSR created by Klusterlet is not approved either"
    pe "kubectl get csr -l \"open-cluster-management.io/cluster-name=$cluster_name,!open-cluster-management.io/addon-name\" -o name"
    
    comment "The SRE engineer would have to approve the CSR and ManagedCluster join"
    echo "IMPORTANT: this is run with high privlege credential on hub"
    pe "./approve-import.sh $cluster_name"

    comment "After approval managedcluster should be Avaialble shortly"
    pe "kubectl wait --for=condition=ManagedClusterConditionAvailable managedcluster $cluster_name --timeout=600s"
    pe "kubectl get managedcluster $cluster_name"
done

comment "To cleanup the demo run demo-cleanup.sh"



